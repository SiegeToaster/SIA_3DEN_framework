#!/usr/bin/env python3

import os

from pygithub3 import Github

def get_files():
    filePath = os.path.dirname(os.getcwd()) # get root directory
    filePath = os.path.join(filePath,'addons')
    allFiles = {}
    paths = os.listdir(filePath)

    for path in paths:
        pathFiles = []
        fullPath = os.path.join(filePath,path,"functions")
        if (not os.path.isdir(fullPath)): continue

        # print(fullPath)
        for file in os.listdir(fullPath):
            if (file.endswith(".sqf") and file.startswith('fnc_')):
                pathFiles.append(file[4:-4])

        allFiles.update({path: pathFiles})

    return allFiles

def formatMessage(files, oldMessage):
    index = oldMessage.find('- [')
    oldMessage = oldMessage[index:]

    oldFunctions = {}
    for message in oldMessage.split('\n'):
        message = message.split('\r')[0]
        index = message.find('] ')
        if (index > -1):
            isComplete = message.find('[x]') > -1
            message = message[index + 2:]
            oldFunctions.update({message: isComplete})
    # print(oldFunctions)

    newMessage = "See the [RPT Logging Macros](https://github.com/Soliders-in-Arms-Arma-3-Group/sia3f/wiki/Development#33-rpt-logging-macros) for information on the available macros."
    for module in files:
        newMessage += "\n\n**{} module**".format(module)
        for function in files.get(module):
            isCompleteText = ' '
            if (oldFunctions.get(function)):
                isCompleteText = 'x'
            newMessage += "\n- [{}] {}".format(isCompleteText,function)
    newMessage += "\n\n*Auto-generated by tools/update_RPT_ToDo.py*"

    return newMessage

def main():
    files = get_files()
    gh = Github(login_or_token=os.environ("GITHUB_TOKEN"))

    issue = gh.get_repo(488816799).get_issue(12)
    currentMessage = issue.body

    newMessage = formatMessage(files, currentMessage)
    print(newMessage)
    issue.edit(issue.title, newMessage)
if __name__ == "__main__":
	main()
